buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT"
    }
}

apply plugin: "net.minecraftforge.gradle.forge"

def mod_file = getModFile()
def build = System.getenv().BUILD_NUMBER;
version = getVersion("VERSION", mod_file)
group = "serum"
archivesBaseName = "serum"
sourceCompatibility = targetCompatibility = "1.8"

if (build) {
    version += ".${build}"
}

minecraft {
    version = "1.10.2-12.18.1.2050"
    runDir = "run"
    mappings = "snapshot_20160518"
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from (sourceSets.main.resources.srcDirs) {
        include "mcmod.info"
        expand "version": project.version, "mcversion": project.minecraft.version
    }
        
    from (sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

String getModFile() {
    String path = "";
    FileTree tree = fileTree(dir: 'src/main/java')
    tree.include '**/*.java'
    tree.visit {element ->
        if (element.file.isFile()) {
            element.file.eachLine { String s ->
                s = s.trim();
                if (s.startsWith("@Mod")) {
                    path = "src/main/java/$element.relativePath"
                }
            }
        }
    }
    return path;
}

String getVersion(String type, String mod_file) {
    String major = "0";
    String revision = "0";
    String patch = "0";
    String prefix = "public static final String $type = \"";
    File file = file(mod_file)
    file.eachLine { String s ->
        s = s.trim();
        if (s.startsWith(prefix)) {
            s = s.substring(prefix.length(), s.length() - 2);
            String[] pts = s.split("\\.");

            major = pts[0];
            revision = pts[1];
            patch = pts[2];
        }
    }
    return "$major.$revision.$patch";
}

task writeVersion << {
    if (build) {
        def buildFile = new File("src/main/resources/version")
        buildFile.withWriter("UTF-8") { writer ->
            writer.write("${build}")
        }
    }
}

build.dependsOn(writeVersion)
